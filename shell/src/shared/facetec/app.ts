import {Config} from "./config";
import {FaceTecSDK} from "./facetec-sdk/core-sdk/FaceTecSDK.js/FaceTecSDK";
import {EnrollmentProcess} from "./scanProcessors/enrollmentProcess";
import {SampleAppUtilities} from "./utilities/SampleAppUtilities";
import {AdditionalScreens} from "./utilities/AdditionalScreens";
import {call3ddbSearch} from "./facetec-api/call3ddbSearch";
import {call3ddbEnroll} from "./facetec-api/call3ddbEnroll";
import {callSessionToken} from "./facetec-api/callSessionToken";
import {generateRandomId} from "./utilities/generateRandomId";
import {elementRefs} from "./elementRefs";

export class UniquenessCheck {
  constructor() {
    // Set the directory path for other FaceTec Browser SDK Resources.
    FaceTecSDK.setResourceDirectory("./FaceTecSDK.js/resources");

    // Set the directory path for required FaceTec Browser SDK images.
    FaceTecSDK.setImagesDirectory("./FaceTec_images");

    // Initialize FaceTec Browser SDK and configure the UI features.
    Config.initializeFromAutogeneratedConfig(FaceTecSDK, function (initializedSuccessfully: boolean) {
      if (initializedSuccessfully) {
        SampleAppUtilities.enableControlButtons();

        AdditionalScreens.setServerUpgradeStyling(
          elementRefs.controls!,
          () => AdditionalScreens.exitAdditionalScreen(SampleAppUtilities.showMainUI));
      }
      SampleAppUtilities.displayStatus(FaceTecSDK.getFriendlyDescriptionForFaceTecSDKStatus(FaceTecSDK.getStatus()));
    });
  }
  /**
   * Checks if the scanned face is already contained in the 3ddb.
   * @param groupName The name of the searchGroup
   */
  async isFaceUniqueInGroup(groupName:string) : Promise<boolean> {
    const sessionToken = await callSessionToken();
    const randomId = generateRandomId();

    const enrollmentProcessor = new EnrollmentProcess(sessionToken, groupName, randomId);
    const enrollmentResult = await enrollmentProcessor.result;

    if (!enrollmentResult.sessionId) {
      throw new Error(`No sessionId`);
    }

    console.log("Enrollment process onSuccess:", enrollmentResult)

    const searchResultJson = await call3ddbSearch(
      enrollmentResult.sessionId,
      randomId,
      groupName);

    if (searchResultJson.success && searchResultJson.results?.length) {
      const firstResult = searchResultJson.results[0];
      console.log(`Found ${firstResult.identifier} in 3ddb. Already verified.`);
      return false;
    } else {
      console.log(`Couldn't find a matching face in the 3ddb. Enrolling ..`);
      const enrollResultJson = await call3ddbEnroll(
        enrollmentResult.sessionId,
        randomId,
        groupName);

      console.log(enrollResultJson);
      console.log(`Cool. You're now verified!`)
      return true;
    }
  }
}