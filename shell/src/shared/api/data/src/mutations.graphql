mutation requestSessionChallenge($address: String!) {
  requestSessionChallenge(address: $address)
}

mutation verifySessionChallenge($challenge: String!, $signature: String!) {
  verifySessionChallenge(challenge: $challenge, signature: $signature) {
    success
    errorMessage
  }
}

mutation addNewLang($langToCreate: String, $langToCopyFrom: String) {
  addNewLang(langToCreate: $langToCreate, langToCopyFrom: $langToCopyFrom)
}

mutation updateValue($lang: String, $key: String, $createdBy: String, $value: String) {
  updateValue(lang: $lang, key: $key, createdBy: $createdBy, value: $value) {
    lang
    key
    createdBy
    value
    version
  }
}

mutation createNewStringAndKey($lang: String, $key: String, $createdBy: String, $version: Int, $value: String) {
  createNewStringAndKey(lang: $lang, key: $key, createdBy: $createdBy, version: $version, value: $value) {
    lang
    key
    createdBy
    version
    value
    needsUpdate
  }
}

mutation setStringUpdateState($key: String) {
  setStringUpdateState(key: $key) {
    lang
    key
    createdBy
    version
    value
    needsUpdate
  }
}

mutation claimInvitation($code: String!) {
  claimInvitation(code: $code) {
    success
    claimedInvitation {
      createdAt
      createdByProfileId
      claimedAt
      claimedByProfileId
    }
  }
}

mutation acknowledge($until: Date!, $safeAddress: String) {
  acknowledge(until: $until, safeAddress: $safeAddress)
}

mutation addMember($groupId: String!, $memberAddress: String!) {
  addMember(groupId: $groupId, memberAddress: $memberAddress) {
    error
    success
  }
}
mutation removeMember($groupId: String!, $memberAddress: String!) {
  removeMember(groupId: $groupId, memberAddress: $memberAddress) {
    error
    success
  }
}

mutation redeemClaimedInvitation {
  redeemClaimedInvitation {
    success
    error
    transactionHash
  }
}

mutation logout {
  logout {
    success
  }
}

mutation tagTransaction($transactionHash: String!, $tag: CreateTagInput!) {
  tagTransaction(transactionHash: $transactionHash, tag: $tag) {
    success
    error
    tag {
      id
      typeId
      value
    }
  }
}

mutation upsertProfile(
  $id: Int
  $firstName: String!
  $lastName: String
  $emailAddress: String
  $askedForEmailAddress: Boolean!
  $dream: String
  $country: String
  $avatarUrl: String
  $avatarCid: String
  $avatarMimeType: String
  $circlesAddress: String
  $circlesSafeOwner: String
  $newsletter: Boolean
  $displayCurrency: DisplayCurrency
  $displayTimeCircles: Boolean
  $status: String!
  $successorOfCirclesAddress: String
  $gender: Gender
  $location: String
  $locationName: String
  $lat: Float
  $lon: Float
) {
  upsertProfile(
    data: {
      id: $id
      firstName: $firstName
      lastName: $lastName
      emailAddress: $emailAddress
      askedForEmailAddress: $askedForEmailAddress
      dream: $dream
      country: $country
      avatarUrl: $avatarUrl
      avatarCid: $avatarCid
      avatarMimeType: $avatarMimeType
      circlesAddress: $circlesAddress
      circlesSafeOwner: $circlesSafeOwner
      newsletter: $newsletter
      displayCurrency: $displayCurrency
      displayTimeCircles: $displayTimeCircles
      status: $status
      successorOfCirclesAddress: $successorOfCirclesAddress
      gender: $gender
      location: $location
      locationName: $locationName
      lat: $lat
      lon: $lon
    }
  ) {
    id
    circlesAddress
    displayCurrency
    circlesSafeOwner
    invitationLink
    successorOfCirclesAddress
    displayName
    firstName
    lastName
    emailAddress
    askedForEmailAddress
    dream
    country
    avatarUrl
    avatarCid
    avatarMimeType
    newsletter
    displayTimeCircles
    displayCurrency
    gender
    location
    locationName
    lat
    lon
    memberships {
      isAdmin
      organisation {
        id
        circlesAddress
        displayCurrency
        displayName
        circlesSafeOwner
        name
        description
        avatarUrl
      }
    }
    verifications {
      createdAt
      revokedAt
      verifierSafeAddress
      verifierProfile {
        id
        circlesAddress
        displayCurrency
        avatarUrl
        name
      }
    }
  }
}

mutation upsertOrganisation($organisation: UpsertOrganisationInput!) {
  upsertOrganisation(organisation: $organisation) {
    success
    error
    organisation {
      id
      avatarMimeType
      avatarUrl
      circlesAddress
      circlesSafeOwner
      createdAt
      description
      name
      location
      locationName
      lat
      lon
    }
  }
}

mutation importOrganisations {
  importOrganisationsOfAccount {
    id
    circlesAddress
    name
    description
    avatarUrl
  }
}

mutation verifySafe($safeAddress: String!) {
  verifySafe(safeAddress: $safeAddress) {
    success
  }
}

mutation revokeSafeVerification($safeAddress: String!) {
  revokeSafeVerification(safeAddress: $safeAddress) {
    success
  }
}

mutation proofUniqueness($humanodeToken: String!) {
  proofUniqueness(humanodeToken: $humanodeToken) {
    existingSafe
  }
}

mutation setIsFavorite($circlesAddress: String!, $isFavorite: Boolean!) {
  setIsFavorite(circlesAddress: $circlesAddress, isFavorite: $isFavorite)
}

mutation shareLink($targetType: LinkTargetType!, $targetKey: String!) {
  shareLink(targetType: $targetType, targetKey: $targetKey)
}
