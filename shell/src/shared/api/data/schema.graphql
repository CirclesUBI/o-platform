# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

interface IAggregatePayload {
    lastUpdatedAt: String
}

interface ICity {
    country: String!
    feature_code: String!
    geonameid: Int!
    latitude: Float!
    longitude: Float!
    name: String!
    population: Int!
}

interface IEventPayload {
    transaction_hash: String
}

union AggregatePayload = Contacts | CrcBalances | Members | Memberships

union EventPayload = ChatMessage | CrcHubTransfer | CrcMinting | CrcSignup | CrcTokenTransfer | CrcTrust | EthTransfer | GnosisSafeEthTransfer | InvitationCreated | InvitationRedeemed | MemberAdded | MembershipAccepted | MembershipOffer | MembershipRejected | OrganisationCreated | WelcomeMessage

union ProfileOrOrganisation = Organisation | Profile

type AcceptMembershipResult {
    error: String
    success: Boolean!
}

type AddMemberResult {
    error: String
    success: Boolean!
}

type AssetBalance {
    token_address: String!
    token_balance: String!
    token_owner_address: String!
    token_owner_profile: Profile
}

type ChatMessage implements IEventPayload {
    from: String!
    from_profile: Profile
    text: String!
    to: String!
    to_profile: Profile
    transaction_hash: String
}

type City implements ICity {
    country: String!
    feature_code: String!
    geonameid: Int!
    latitude: Float!
    longitude: Float!
    name: String!
    population: Int!
}

type CityStats implements ICity {
    citizenCount: Int!
    country: String!
    feature_code: String!
    geonameid: Int!
    latitude: Float!
    longitude: Float!
    name: String!
    population: Int!
}

type ClaimInvitationResult {
    claimedInvitation: ClaimedInvitation
    success: Boolean!
}

type ClaimedInvitation {
    claimedAt: String!
    claimedBy: Profile
    claimedByProfileId: Int!
    createdAt: String!
    createdBy: Profile
    createdByProfileId: Int!
}

type CommonTrust {
    profile: Profile
    safeAddress1: String!
    safeAddress2: String!
    type: String!
}

type ConsumeDepositedChallengeResponse {
    challenge: String
    success: Boolean!
}

type Contact {
    contactAddress: String!
    contactAddressProfile: Profile
    lastContactAt: String
    lastEvent: ProfileEvent
    safeAddress: String!
    safeAddressProfile: Profile
    trustsYou: Int
    youTrust: Int
}

type Contact2 {
    contactAddress: String!
    contactAddress_Profile: Profile
    lastContactAt: String!
    metadata: [ContactPoint!]!
}

type ContactPoint {
    directions: [ContactDirection!]!
    lastContactAt: String!
    name: String!
    values: [String!]!
}

type Contacts implements IAggregatePayload {
    contacts: [Contact2!]!
    lastUpdatedAt: String!
}

type CountryStats {
    citizenCount: Int!
    name: String!
}

type CrcBalances implements IAggregatePayload {
    balances: [AssetBalance!]!
    lastUpdatedAt: String!
}

type CrcHubTransfer implements IEventPayload {
    flow: String!
    from: String!
    from_profile: Profile
    tags: [Tag!]!
    to: String!
    to_profile: Profile
    transaction_hash: String!
    transfers: [CrcTokenTransfer!]!
}

type CrcMinting implements IEventPayload {
    from: String!
    from_profile: Profile
    to: String!
    to_profile: Profile
    token: String!
    transaction_hash: String!
    value: String!
}

type CrcSignup implements IEventPayload {
    token: String!
    transaction_hash: String!
    user: String!
    user_profile: Profile
}

type CrcTokenTransfer implements IEventPayload {
    from: String!
    from_profile: Profile
    to: String!
    to_profile: Profile
    token: String!
    transaction_hash: String!
    value: String!
}

type CrcTrust implements IEventPayload {
    address: String!
    address_profile: Profile
    can_send_to: String!
    can_send_to_profile: Profile
    limit: Int!
    transaction_hash: String!
}

type CreateInvitationResult {
    createdInviteEoas: [CreatedInvitation!]!
    error: String
    success: Boolean!
}

type CreateOrganisationResult {
    error: String
    organisation: Organisation
    success: Boolean!
}

type CreatedInvitation {
    address: String!
    balance: String!
    claimedAt: String
    claimedBy: Profile
    claimedByProfileId: Int
    code: String!
    createdAt: String!
    createdBy: Profile
    createdByProfileId: Int!
    name: String!
}

type CreatedInviteEoa {
    address: String!
    fee: String!
    for: String!
}

type DelegateAuthInit {
    appId: String!
    challengeType: String
    delegateAuthCode: String
    errorMessage: String
    success: Boolean!
    validTo: String
}

type DepositChallengeResponse {
    errorMessage: String
    success: Boolean!
}

type EthTransfer implements IEventPayload {
    from: String!
    from_profile: Profile
    tags: [Tag!]!
    to: String!
    to_profile: Profile
    transaction_hash: String!
    value: String!
}

type ExchangeTokenResponse {
    errorMessage: String
    success: Boolean!
}

type GnosisSafeEthTransfer implements IEventPayload {
    from: String!
    from_profile: Profile
    initiator: String!
    tags: [Tag!]!
    to: String!
    to_profile: Profile
    transaction_hash: String!
    value: String!
}

type Goal {
    totalCitizens: Int!
}

type InitAggregateState {
    hubSignupTransaction: String
    invitation: ClaimedInvitation
    invitationTransaction: String
    registration: Profile
    safeFundingTransaction: String
}

type InvitationCreated implements IEventPayload {
    code: String!
    name: String!
    transaction_hash: String
}

type InvitationRedeemed implements IEventPayload {
    code: String!
    name: String!
    redeemedBy: String!
    redeemedBy_profile: Profile
    transaction_hash: String
}

type LockOfferResult {
    lockedUntil: String
    success: Boolean!
}

type LogoutResponse {
    errorMessage: String
    success: Boolean!
}

type MemberAdded implements IEventPayload {
    createdBy: String!
    createdBy_profile: Profile
    isAdmin: Boolean!
    member: String!
    member_profile: Profile
    organisation: String!
    organisation_profile: Organisation
    transaction_hash: String
}

type Members implements IAggregatePayload {
    lastUpdatedAt: String!
    members: [ProfileOrOrganisation!]!
}

type Membership {
    acceptedAt: String
    createdAt: String!
    createdBy: Profile
    createdByProfileId: Int!
    isAdmin: Boolean!
    organisation: Organisation!
    rejectedAt: String
    validTo: String
}

type MembershipAccepted implements IEventPayload {
    createdBy: String!
    createdBy_profile: Profile
    member: String!
    member_profile: Profile
    organisation: String!
    organisation_profile: Organisation
    transaction_hash: String
}

type MembershipOffer implements IEventPayload {
    createdBy: String!
    createdBy_profile: Profile
    isAdmin: Boolean!
    organisation: String!
    organisation_profile: Organisation
    transaction_hash: String
}

type MembershipRejected implements IEventPayload {
    member: String!
    member_profile: Profile
    organisation: String!
    organisation_profile: Organisation
    transaction_hash: String
}

type Memberships implements IAggregatePayload {
    lastUpdatedAt: String!
    organisations: [Organisation!]!
}

type Mutation {
    acceptMembership(membershipId: Int!): AcceptMembershipResult
    acknowledge(until: String!): Boolean!
    addMember(groupId: String!, memberId: Int!): AddMemberResult
    authenticateAt(appId: String!): DelegateAuthInit!
    claimInvitation(code: String!): ClaimInvitationResult!
    consumeDepositedChallenge(delegateAuthCode: String!): ConsumeDepositedChallengeResponse!
    createInvitations(for: [String!]!): CreateInvitationResult!
    createTestInvitation: CreateInvitationResult!
    depositChallenge(jwt: String!): DepositChallengeResponse!
    exchangeToken: ExchangeTokenResponse!
    lockOffer(data: LockOfferInput!): LockOfferResult!
    logout: LogoutResponse!
    provePayment(data: PaymentProof!): ProvePaymentResult!
    redeemClaimedInvitation: RedeemClaimedInvitationResult!
    rejectMembership(membershipId: Int!): RejectMembershipResult
    removeMember(groupId: String!, memberId: Int!): RemoveMemberResult
    requestInvitationOffer(for: String!): Offer!
    requestSessionChallenge(address: String!): String!
    requestUpdateSafe(data: RequestUpdateSafeInput!): RequestUpdateSafeResponse!
    sendMessage(content: String!, toSafeAddress: String!): SendMessageResult!
    tagTransaction(tag: CreateTagInput!, transactionHash: String!): TagTransactionResult!
    unlistOffer(offerId: LockOfferInput!): Boolean!
    updateSafe(data: UpdateSafeInput!): UpdateSafeResponse!
    upsertOffer(data: UpsertOfferInput!): Offer!
    upsertOrganisation(organisation: UpsertOrganisationInput!): CreateOrganisationResult!
    upsertProfile(data: UpsertProfileInput!): Profile!
    upsertRegion(organisation: UpsertOrganisationInput!): CreateOrganisationResult!
    upsertTag(data: UpsertTagInput!): Tag!
    verifySessionChallenge(challenge: String!, signature: String!): ExchangeTokenResponse
}

type NotificationEvent {
    type: String!
}

type Offer {
    categoryTag: Tag
    categoryTagId: Int!
    city: City
    createdBy: Profile
    createdByProfileId: Int!
    deliveryTermsTag: Tag
    deliveryTermsTagId: Int!
    description: String
    geonameid: Int!
    id: String!
    maxUnits: Int
    pictureMimeType: String!
    pictureUrl: String!
    pricePerUnit: String!
    publishedAt: String!
    purchasedAt: String
    title: String!
    unitTag: Tag
    unitTagId: Int!
    unlistedAt: String
}

type Organisation {
    avatarMimeType: String
    avatarUrl: String
    circlesAddress: String
    circlesSafeOwner: String
    city: City
    cityGeonameid: Int
    createdAt: String!
    description: String
    id: Int!
    members: [ProfileOrOrganisation!]
    name: String!
    offers: [Offer!]
    trustsYou: Int
}

type OrganisationCreated implements IEventPayload {
    organisation: String!
    organisation_profile: Organisation
    transaction_hash: String
}

type Profile {
    avatarCid: String
    avatarMimeType: String
    avatarUrl: String
    circlesAddress: String
    circlesSafeOwner: String
    circlesTokenAddress: String
    city: City
    cityGeonameid: Int
    claimedInvitation: ClaimedInvitation
    country: String
    displayTimeCircles: Boolean
    dream: String
    firstName: String!
    id: Int!
    lastEvent: ProfileEvent
    lastName: String
    memberships: [Membership!]
    newsletter: Boolean
    offers: [Offer!]
    status: String
    trustsYou: Int
    youTrust: Int
}

type ProfileAggregate {
    payload: AggregatePayload!
    safe_address: String!
    safe_address_profile: Profile
    type: String!
}

type ProfileEvent {
    block_number: Int
    direction: String!
    payload: EventPayload
    safe_address: String!
    safe_address_profile: Profile
    tags: [Tag!]
    timestamp: String!
    transaction_hash: String
    transaction_index: Int
    type: String!
    value: String
}

type ProvePaymentResult {
    success: Boolean!
}

type Purchase {
    id: Int!
    purchasedAt: String!
    purchasedBy: Profile!
    purchasedByProfileId: Int!
    purchasedFrom: Profile!
    purchasedFromProfileId: Int!
    purchasedItem: Offer!
    purchasedOfferId: String!
    status: PurchaseStatus!
}

type Query {
    aggregates(safeAddress: String!, types: [AggregateType!]!): [ProfileAggregate!]!
    balance(safeAddress: String!): String!
    balancesByAsset(safeAddress: String!): [AssetBalance!]!
    blockchainEvents(fromBlock: Int, pagination: PaginationArgs, safeAddress: String!, toBlock: Int, types: [String!]): [ProfileEvent!]!
    blockchainEventsByTransactionHash(safeAddress: String!, transactionHash: String!, types: [String!]): [ProfileEvent!]!
    chatHistory(contactSafeAddress: String!, pagination: PaginationArgs, safeAddress: String!): [ProfileEvent!]!
    cities(query: QueryCitiesInput!): [City!]!
    claimedInvitation: ClaimedInvitation
    commonTrust(safeAddress1: String!, safeAddress2: String!): [CommonTrust!]!
    contact(contactAddress: String!, safeAddress: String!): Contact
    contacts(safeAddress: String!): [Contact!]!
    events(pagination: PaginationArgs!, safeAddress: String!, types: [EventType!]!): [ProfileEvent!]!
    findSafeAddressByOwner(owner: String!): [String!]!
    hubSignupTransaction: ProfileEvent
    inbox: [ProfileEvent!]!
    initAggregateState: InitAggregateState
    invitationTransaction: ProfileEvent
    lastUBITransaction: String
    myInvitations: [CreatedInvitation!]!
    myProfile: Profile
    offers(query: QueryOfferInput!): [Offer!]!
    organisations(pagination: PaginationArgs): [Organisation!]!
    organisationsByAddress(addresses: [String!]!): [Organisation!]!
    profilesById(ids: [Int!]!): [Profile!]!
    profilesBySafeAddress(safeAddresses: [String!]!): [Profile!]!
    regions(pagination: PaginationArgs): [Organisation!]!
    safeFundingTransaction: ProfileEvent
    search(query: SearchInput!): [Profile!]!
    sessionInfo: SessionInfo!
    stats: Stats
    tagById(id: Int!): Tag
    tags(query: QueryTagsInput!): [Tag!]!
    trustRelations(safeAddress: String!): [TrustRelation!]!
    version: Version!
    whoami: String
}

type RedeemClaimedInvitationResult {
    error: String
    success: Boolean!
    transactionHash: String
}

type RejectMembershipResult {
    error: String
    success: Boolean!
}

type RemoveMemberResult {
    error: String
    success: Boolean!
}

type RequestUpdateSafeResponse {
    challenge: String
    errorMessage: String
    success: Boolean!
}

type SendMessageResult {
    error: String
    event: ProfileEvent
    success: Boolean!
}

type Server {
    version: String!
}

type SessionInfo {
    hasProfile: Boolean
    isLoggedOn: Boolean!
    profileId: Int
}

type Stats {
    cities: [CityStats!]!
    cityRank: Int
    countries: [CountryStats!]!
    currentGoal: Int!
    currentGoalFrom: Int!
    goals: [Goal!]!
    inviteRank: Int!
    nextGoalAt: Int!
    totalCitizens: Int!
}

type Subscription {
    events: NotificationEvent!
}

type Tag {
    id: Int!
    typeId: String!
    value: String
}

type TagTransactionResult {
    error: String
    success: Boolean!
    tag: Tag
}

type TrustRelation {
    direction: TrustDirection!
    otherSafeAddress: String!
    otherSafeAddressProfile: Profile
    safeAddress: String!
    safeAddressProfile: Profile
}

type UpdateSafeResponse {
    errorMessage: String
    newSafeAddress: String
    success: Boolean!
}

type Version {
    major: Int!
    minor: Int!
    revision: Int!
}

type WelcomeMessage implements IEventPayload {
    member: String!
    member_profile: Profile
    transaction_hash: String
}

enum AggregateType {
    Contacts
    CrcBalances
    Members
    Memberships
}

enum ContactDirection {
    In
    Out
}

enum EventType {
    ChatMessage
    CrcHubTransfer
    CrcMinting
    CrcSignup
    CrcTokenTransfer
    CrcTrust
    EthTransfer
    GnosisSafeEthTransfer
    InvitationCreated
    InvitationRedeemed
    MemberAdded
    MembershipAccepted
    MembershipOffer
    MembershipRejected
    OrganisationCreated
    WelcomeMessage
}

enum PurchaseStatus {
    INVALID
    ITEM_LOCKED
    PAYMENT_PROVEN
}

enum SortOrder {
    ASC
    DESC
}

enum TrustDirection {
    IN
    MUTUAL
    OUT
}

input CreateTagInput {
    typeId: String!
    value: String
}

input DepositChallenge {
    jwt: String!
}

input LockOfferInput {
    offerId: String!
}

input PaginationArgs {
    continueAt: String!
    limit: Int!
    order: SortOrder!
}

input PaymentProof {
    forOfferId: LockOfferInput!
    transactionHash: String!
}

input QueryCitiesByGeonameIdInput {
    geonameid: [Int!]!
}

input QueryCitiesByNameInput {
    languageCode: String
    name_like: String!
}

input QueryCitiesInput {
    byId: QueryCitiesByGeonameIdInput
    byName: QueryCitiesByNameInput
}

input QueryOfferInput {
    categoryTagId: Int
    createdByProfileId: Int
    id: String
    publishedAt_gt: String
    publishedAt_lt: String
}

input QueryProfileInput {
    circlesAddress: [String!]
    country: String
    firstName: String
    id: [Int!]
    lastName: String
}

input QueryPurchaseInput {
    purchasedByProfileId: String!
}

input QueryTagsInput {
    typeId_in: [String!]!
    value_like: String
}

input QueryUniqueProfileInput {
    id: Int!
}

input RequestUpdateSafeInput {
    newSafeAddress: String!
}

input SearchInput {
    searchString: String!
}

input UpdateSafeInput {
    signature: String!
}

input UpsertOfferInput {
    categoryTagId: Int!
    deliveryTermsTagId: Int!
    description: String
    geonameid: Int!
    id: String
    maxUnits: Int
    pictureMimeType: String
    pictureUrl: String
    pricePerUnit: String!
    title: String!
    unitTagId: Int!
}

input UpsertOrganisationInput {
    avatarMimeType: String
    avatarUrl: String
    circlesAddress: String
    cityGeonameid: Int
    description: String
    id: Int
    name: String!
}

input UpsertProfileInput {
    avatarCid: String
    avatarMimeType: String
    avatarUrl: String
    circlesAddress: String
    circlesSafeOwner: String
    circlesTokenAddress: String
    cityGeonameid: Int
    country: String
    displayTimeCircles: Boolean
    dream: String
    emailAddress: String
    firstName: String!
    id: Int
    lastName: String
    newsletter: Boolean
    status: String!
}

input UpsertTagInput {
    id: Int
    typeId: String!
    value: String
}
