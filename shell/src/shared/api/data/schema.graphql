# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

directive @cost(value: Int) on FIELD_DEFINITION

directive @costFactor(value: Int) on FIELD_DEFINITION

"A date and time value in JSON format."
scalar Date

input ContactAggregateFilter {
    addresses: [String!]!
}

input CrcBalanceAggregateFilter {
    tokenAddresses: [String!]!
}

input CreateTagInput {
    typeId: String!
    value: String
}

input Geolocation {
    lat: Float!
    lon: Float!
}

input PaginationArgs {
    continueAt: String
    continueAtId: Int
    limit: Int!
    order: SortOrder!
}

input ProfileAggregateFilter {
    contacts: ContactAggregateFilter
    crcBalance: CrcBalanceAggregateFilter
}

input ProfileEventFilter {
    direction: Direction
    from: String
    to: String
    transactionHash: String
    with: String
}

input QueryAllBusinessesConditions {
    inCategories: [Int!]
    inCirclesAddress: [String!]
}

input QueryAllBusinessesOrder {
    orderBy: QueryAllBusinessesOrderOptions!
}

input QueryAllBusinessesParameters {
    order: QueryAllBusinessesOrder
    ownCoordinates: Geolocation
    where: QueryAllBusinessesConditions
}

input QueryProfileInput {
    circlesAddress: [String!]
    country: String
    firstName: String
    id: [Int!]
    lastName: String
}

input QueryTagsInput {
    typeId_in: [String!]!
    value_like: String
}

input QueryUniqueProfileInput {
    id: Int!
}

input RequestUpdateSafeInput {
    newSafeAddress: String!
}

input SearchInput {
    searchString: String!
}

input UpdateSafeInput {
    signature: String!
}

input UpsertOrganisationInput {
    avatarMimeType: String
    avatarUrl: String
    circlesAddress: String
    description: String
    displayCurrency: DisplayCurrency
    id: Int
    largeBannerUrl: String
    lat: Float
    location: String
    locationName: String
    lon: Float
    name: String!
    smallBannerUrl: String
}

input UpsertProfileInput {
    age: Int
    askedForEmailAddress: Boolean
    avatarCid: String
    avatarMimeType: String
    avatarUrl: String
    circlesAddress: String
    circlesSafeOwner: String
    circlesTokenAddress: String
    country: String
    displayCurrency: DisplayCurrency
    displayTimeCircles: Boolean
    dream: String
    emailAddress: String
    firstName: String!
    gender: Gender
    id: Int
    lastName: String
    lat: Float
    location: String
    locationName: String
    lon: Float
    newsletter: Boolean
    status: String!
    successorOfCirclesAddress: String
}

input UpsertTagInput {
    id: Int
    typeId: String!
    value: String
}

input VerifiedSafesFilter {
    addresses: [String!]
}
