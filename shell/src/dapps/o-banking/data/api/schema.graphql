# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type CirclesToken {
    address: String!
    createdAt: String!
    createdInBlockHash: String!
    createdInBlockNo: Int!
    id: Int!
    owner: CirclesWallet
    transfers: [CirclesTokenTransfer!]
}

type CirclesTokenTransfer {
    createdAt: String!
    createdInBlockHash: String!
    createdInBlockNo: Int!
    id: Int!
    object: CirclesWallet!
    predicate: CirclesTokenTransferPredicate!
    subject: CirclesWallet!
    value: String!
}

type CirclesTrustRelation {
    createdAt: String
    createdInBlockHash: String!
    createdInBlockNo: Int!
    id: Int!
    object: CirclesWallet!
    predicate: CirclesTrustRelationPredicate!
    subject: CirclesWallet!
    weight: Int!
}

type CirclesWallet {
    address: String!
    id: Int!
    ownToken: CirclesToken
    tokens: [CirclesToken!]
    transfers: [CirclesTokenTransfer!]
    trustRelations: [CirclesTrustRelation!]
}

type ConsumeDepositedChallengeResponse {
    challenge: String
    success: Boolean!
}

type DelegateAuthInit {
    appId: String!
    challengeType: String
    delegateAuthCode: String
    errorMessage: String
    success: Boolean!
    validTo: String
}

type DepositChallengeResponse {
    errorMessage: String
    success: Boolean!
}

type ExchangeTokenResponse {
    errorMessage: String
    success: Boolean!
}

type LogoutResponse {
    errorMessage: String
    success: Boolean!
}

type Mutation {
    addCirclesToken(data: AddCirclesTokenInput!): CirclesToken!
    addCirclesTokenTransfer(data: AddCirclesTokenTransferInput!): CirclesTokenTransfer!
    addCirclesTrustRelation(data: AddCirclesTrustRelationInput!): CirclesTrustRelation!
    addCirclesWallet(data: AddCirclesWalletInput!): CirclesWallet!
    authenticateAt(appId: String!): DelegateAuthInit!
    consumeDepositedChallenge(delegateAuthCode: String!): ConsumeDepositedChallengeResponse!
    depositChallenge(jwt: String!): DepositChallengeResponse!
    exchangeToken: ExchangeTokenResponse!
    logout: LogoutResponse!
    upsertProfile(data: UpsertProfileInput!): Profile!
}

type Profile {
    avatarCid: String
    avatarMimeType: String
    avatarUrl: String
    circlesAddress: String
    country: String
    dream: String!
    firstName: String!
    id: Int!
    lastName: String
}

type Query {
    circlesWallets(query: QueryCirclesWalletInput!): [CirclesWallet!]!
    profiles(query: QueryProfileInput!): [Profile!]!
    search(query: SearchInput!): [Profile!]!
    sessionInfo: SessionInfo!
    version: Version!
}

type Server {
    version: String!
}

type SessionInfo {
    hasProfile: Boolean
    isLoggedOn: Boolean!
    profileId: Int
}

type Version {
    major: Int!
    minor: Int!
    revision: Int!
}

enum CacheControlScope {
    PRIVATE
    PUBLIC
}

enum CirclesTokenTransferPredicate {
    GIVING_TO
    RECEIVING_FROM
}

enum CirclesTrustRelationPredicate {
    GIVING_TO
    RECEIVING_FROM
}

input AddCirclesTokenInput {
    address: String!
    createdAt: String!
    createdInBlockHash: String!
    createdInBlockNo: Int!
    ownerAddress: String!
}

input AddCirclesTokenTransferInput {
    createdAt: String!
    createdInBlockHash: String!
    createdInBlockNo: Int!
    objectAddress: String!
    predicate: CirclesTokenTransferPredicate!
    subjectAddress: String!
    transferredToken: String!
    value: String!
}

input AddCirclesTrustRelationInput {
    createdAt: String!
    createdInBlockHash: String!
    createdInBlockNo: Int!
    objectAddress: String!
    predicate: CirclesTrustRelationPredicate!
    subjectAddress: String!
    weight: Int!
}

input AddCirclesWalletInput {
    address: String!
    ownToken: AddCirclesTokenInput
}

input DepositChallenge {
    jwt: String!
}

input QueryCirclesWalletInput {
    address: String
    isTrustedBy: String
    ownTokenAddress: String
    trusts: String
}

input QueryProfileInput {
    circlesAddress: [String!]
    country: String
    firstName: String
    id: Int
    lastName: String
}

input QueryUniqueProfileInput {
    id: Int!
}

input SearchInput {
    searchString: String!
}

input UpsertProfileInput {
    avatarCid: String
    avatarMimeType: String
    avatarUrl: String
    circlesAddress: String
    country: String
    dream: String!
    emailAddress: String
    firstName: String!
    id: Int
    lastName: String
}


"The `Upload` scalar type represents a file upload."
scalar Upload